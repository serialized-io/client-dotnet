// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SerializedClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Serialized SaaS API
    /// </summary>
    public partial interface ISerialized : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Store events
        /// </summary>
        /// <remarks>
        /// Stores all events in the request atomically. All events must refer
        /// to the same aggregate id.
        /// </remarks>
        /// <param name='aggregateType'>
        /// The name of the aggregate type.
        /// </param>
        /// <param name='aggregateId'>
        /// The unique id of the aggregate
        /// </param>
        /// <param name='eventBatch'>
        /// Batch of one or more events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> StoreEventsWithHttpMessagesAsync(string aggregateType, System.Guid aggregateId, EventBatch eventBatch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete all aggregates by type
        /// </summary>
        /// <remarks>
        /// Permanently delete all aggregates, including all events, for given
        /// aggregate type.
        /// </remarks>
        /// <param name='aggregateType'>
        /// The name of the aggregate type
        /// </param>
        /// <param name='deleteToken'>
        /// Valid delete token. Will be included in the response to the first
        /// DELETE request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeleteAggregatesByTypeOKResponse>> DeleteAggregatesByTypeWithHttpMessagesAsync(string aggregateType, System.Guid? deleteToken = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if an aggregate exists
        /// </summary>
        /// <param name='aggregateType'>
        /// The name of the aggregate type
        /// </param>
        /// <param name='aggregateId'>
        /// The unique id of the aggregate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AggregateExistsWithHttpMessagesAsync(string aggregateType, System.Guid aggregateId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an aggregate
        /// </summary>
        /// <remarks>
        /// Permanently delete an aggregate, including all events.
        /// </remarks>
        /// <param name='aggregateType'>
        /// The name of the aggregate type
        /// </param>
        /// <param name='aggregateId'>
        /// The unique id of the aggregate
        /// </param>
        /// <param name='deleteToken'>
        /// Valid delete token. Will be included in the response to the first
        /// DELETE request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeleteAggregateOKResponse>> DeleteAggregateWithHttpMessagesAsync(string aggregateType, System.Guid aggregateId, System.Guid? deleteToken = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Load all events for an aggregate
        /// </summary>
        /// <remarks>
        /// By loading all events for a single aggregate we can derive the
        /// current state.
        /// </remarks>
        /// <param name='aggregateType'>
        /// The name of the aggregate type
        /// </param>
        /// <param name='aggregateId'>
        /// The unique id of the aggregate
        /// </param>
        /// <param name='since'>
        /// Optional version number to start from
        /// </param>
        /// <param name='limit'>
        /// Optional version limit. Default is 1000.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LoadEventsOKResponse>> LoadEventsWithHttpMessagesAsync(string aggregateType, System.Guid aggregateId, int? since = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get event feeds overview
        /// </summary>
        /// <remarks>
        /// Overview showing number of batches, aggregates and events per
        /// aggregate type.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ListFeedsOKResponse>> ListFeedsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get current global sequence number
        /// </summary>
        /// <remarks>
        /// Get current global sequence number at head for all feeds
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationHeaderResponse<GetCurrentGlobalSequenceNumberHeaders>> GetCurrentGlobalSequenceNumberWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get feed of events for all types
        /// </summary>
        /// <remarks>
        /// Get all events for all aggregates for all types (feed names). The
        /// payload is returned with the event batches in insertion order, each
        /// with a unique sequence number.
        /// </remarks>
        /// <param name='since'>
        /// Optional sequence number to start from
        /// </param>
        /// <param name='limit'>
        /// Optional response limit. Default is 1000.
        /// </param>
        /// <param name='fromParameter'>
        /// Optional ISO 8601 date-time string to start from, eg.
        /// 2017-07-21T17:32:28. Must be used in combination with 'to'
        /// parameter.
        /// </param>
        /// <param name='to'>
        /// Optional ISO 8601 date-time string to stop at, eg.
        /// 2017-07-21T17:32:28. Must be used in combination with 'from'
        /// parameter.
        /// </param>
        /// <param name='partitionCount'>
        /// The expected total number of partitions, i.e. the total number of
        /// consumers feeding in parallel.
        /// </param>
        /// <param name='partitionNumber'>
        /// The partition number to request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Feed>> FeedEventsWithHttpMessagesAsync(int? since = default(int?), int? limit = default(int?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = default(int?), int? partitionNumber = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get current sequence number
        /// </summary>
        /// <remarks>
        /// Get current sequence number at head for a given feed
        /// </remarks>
        /// <param name='name'>
        /// The name of the feed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationHeaderResponse<GetCurrentSequenceNumberHeaders>> GetCurrentSequenceNumberWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get feed of events
        /// </summary>
        /// <remarks>
        /// Get all events for all aggregates given a type (feed name). The
        /// payload is returned with the event batches in insertion order, each
        /// with a unique sequence number.
        /// </remarks>
        /// <param name='name'>
        /// The name of the feed (aggregate type)
        /// </param>
        /// <param name='since'>
        /// Optional sequence number to start from
        /// </param>
        /// <param name='limit'>
        /// Optional response limit. Default is 1000.
        /// </param>
        /// <param name='fromParameter'>
        /// Optional ISO 8601 date-time string to start from, eg.
        /// 2017-07-21T17:32:28. Must be used in combination with 'to'
        /// parameter.
        /// </param>
        /// <param name='to'>
        /// Optional ISO 8601 date-time string to stop at, 2017-07-21T17:32:28.
        /// Must be used in combination with 'from' parameter.
        /// </param>
        /// <param name='partitionCount'>
        /// The expected total number of partitions, i.e. the total number of
        /// consumers feeding in parallel.
        /// </param>
        /// <param name='partitionNumber'>
        /// The partition number to request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Feed>> FeedEventsByTypeWithHttpMessagesAsync(string name, int? since = default(int?), int? limit = default(int?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = default(int?), int? partitionNumber = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List scheduled reactions
        /// </summary>
        /// <remarks>
        /// List all scheduled definitions
        /// </remarks>
        /// <param name='skip'>
        /// Number of entries to skip
        /// </param>
        /// <param name='limit'>
        /// Max number of entries to include in response. Default is 10.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Reactions>> ListScheduledReactionsWithHttpMessagesAsync(int? skip = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a scheduled reaction
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a reaction that has not yet been
        /// executed.
        /// </remarks>
        /// <param name='reactionId'>
        /// ID of the scheduled reaction to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteScheduledReactionWithHttpMessagesAsync(System.Guid reactionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute a scheduled reaction
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to execute a scheduled reaction without
        /// waiting for the trigger to fire.
        /// </remarks>
        /// <param name='reactionId'>
        /// ID of the scheduled reaction to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ExecuteScheduledReactionWithHttpMessagesAsync(System.Guid reactionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List triggered reactions
        /// </summary>
        /// <remarks>
        /// List all reactions that have been executed already.
        /// </remarks>
        /// <param name='skip'>
        /// Number of entries to skip
        /// </param>
        /// <param name='limit'>
        /// Max number of entries to include in response. Default is 10.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Reactions>> ListTriggeredReactionsWithHttpMessagesAsync(int? skip = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Re-execute a triggered reaction
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to re-execute an already executed
        /// reaction.
        /// </remarks>
        /// <param name='reactionId'>
        /// ID of the reaction to re-execute.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ReExecuteTriggeredReactionWithHttpMessagesAsync(System.Guid reactionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List reaction definitions
        /// </summary>
        /// <remarks>
        /// List all reaction definitions
        /// </remarks>
        /// <param name='skip'>
        /// Number of entries to skip
        /// </param>
        /// <param name='limit'>
        /// Max number of entries to include in response. Default is 100.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ReactionDefinitions>> ListReactionDefinitionsWithHttpMessagesAsync(int? skip = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create reaction definition
        /// </summary>
        /// <remarks>
        /// Create a new reaction definition
        /// </remarks>
        /// <param name='reactionDefinition'>
        /// The reaction definition
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateReactionDefinitionWithHttpMessagesAsync(ReactionDefinition reactionDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a reaction definition
        /// </summary>
        /// <param name='reactionName'>
        /// The reaction name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteReactionDefinitionWithHttpMessagesAsync(string reactionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get reaction definition
        /// </summary>
        /// <param name='reactionName'>
        /// The reaction name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ReactionDefinition>> GetReactionDefinitionWithHttpMessagesAsync(string reactionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update reaction definition
        /// </summary>
        /// <param name='reactionName'>
        /// The reaction name
        /// </param>
        /// <param name='reactionDefinition'>
        /// The reaction definition
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateOrUpdateReactionDefinitionWithHttpMessagesAsync(string reactionName, ReactionDefinition reactionDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get projections overview
        /// </summary>
        /// <remarks>
        /// Includes projection names and count
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ListProjectionsOKResponse>> ListProjectionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List projection definitions
        /// </summary>
        /// <remarks>
        /// List all definitions
        /// </remarks>
        /// <param name='skip'>
        /// Number of entries to skip
        /// </param>
        /// <param name='limit'>
        /// Max number of entries to include in response. Default is 100.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectionDefinitions>> ListProjectionDefinitionsWithHttpMessagesAsync(int? skip = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a projection definition
        /// </summary>
        /// <remarks>
        /// Create a new definition
        /// </remarks>
        /// <param name='projectionDefinition'>
        /// Definition of the projection
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProjectionDefinitionWithHttpMessagesAsync(ProjectionDefinition projectionDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get projection definition
        /// </summary>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProjectionDefinition>> GetProjectionDefinitionWithHttpMessagesAsync(string projectionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a projection definition
        /// </summary>
        /// <remarks>
        /// Create or update a definition
        /// </remarks>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='projectionDefinition'>
        /// Definition of the projection
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateOrUpdateProjectionDefinitionWithHttpMessagesAsync(string projectionName, ProjectionDefinition projectionDefinition, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete projection definition
        /// </summary>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProjectionDefinitionWithHttpMessagesAsync(string projectionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List single projections
        /// </summary>
        /// <remarks>
        /// List all single projections
        /// </remarks>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='reference'>
        /// Reference string to filter on. See JsonPath 'setref' for details.
        /// </param>
        /// <param name='sort'>
        /// Sort string. Any combination of the following fields: projectionId,
        /// reference, createdAt, updatedAt. Add '+' and '-' prefixes to
        /// indicate ascending/descending sort order. Ascending order is
        /// default.
        /// </param>
        /// <param name='skip'>
        /// Number of entries to skip
        /// </param>
        /// <param name='limit'>
        /// Max number of entries to include in response. Default is 100.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Projections>> ListSingleProjectionsWithHttpMessagesAsync(string projectionName, string reference = default(string), string sort = default(string), int? skip = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete/recreate single projections
        /// </summary>
        /// <remarks>
        /// This call deletes all existing projections and starts a rebuild
        /// from the beginning of the event history. Keep in mind that this
        /// might take a while.
        /// </remarks>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RecreateSingleProjectionsWithHttpMessagesAsync(string projectionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get single projection
        /// </summary>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='projectionId'>
        /// The projectionId
        /// </param>
        /// <param name='awaitCreation'>
        /// Max number of milliseconds to await the initial creation. Must be
        /// between 1 and 60000.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Projection>> GetSingleProjectionWithHttpMessagesAsync(string projectionName, System.Guid projectionId, int? awaitCreation = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List aggregated projections
        /// </summary>
        /// <remarks>
        /// List all aggregated projections
        /// </remarks>
        /// <param name='sort'>
        /// Sort string. Any combination of the following fields: projectionId,
        /// createdAt, updatedAt. Add '+' and '-' prefixes to indicate
        /// ascending/descending sort order. Ascending order is default.
        /// </param>
        /// <param name='skip'>
        /// Number of entries to skip
        /// </param>
        /// <param name='limit'>
        /// Max number of entries to include in response. Default is 100.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Projections>> ListAggregatedProjectionsWithHttpMessagesAsync(string sort = default(string), int? skip = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get aggregated projection
        /// </summary>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Projection>> GetAggregatedProjectionWithHttpMessagesAsync(string projectionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete/recreate aggregated projections
        /// </summary>
        /// <remarks>
        /// This call deletes all existing projections and starts a rebuild
        /// from the beginning of the event history. Keep in mind that this
        /// might take a while.
        /// </remarks>
        /// <param name='projectionName'>
        /// The projection name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RecreateAggregatedProjectionsWithHttpMessagesAsync(string projectionName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List tenants
        /// </summary>
        /// <remarks>
        /// List tenants
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Tenants>> ListTenantsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add tenant
        /// </summary>
        /// <remarks>
        /// Add tenant
        /// </remarks>
        /// <param name='tenant'>
        /// Tenant
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddTenantWithHttpMessagesAsync(Tenant tenant, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete tenant
        /// </summary>
        /// <remarks>
        /// Delete tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTenantWithHttpMessagesAsync(System.Guid tenantId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
