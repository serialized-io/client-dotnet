// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SerializedClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ProjectionDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ProjectionDefinition class.
        /// </summary>
        public ProjectionDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProjectionDefinition class.
        /// </summary>
        /// <param name="projectionName">Name of the projection type</param>
        /// <param name="feedName">Name of the feed</param>
        /// <param name="aggregated">Dictates whether the definition should
        /// result in one projection per aggregate type or one projection per
        /// aggregateId.</param>
        /// <param name="signingSecret">The secret key used to HMAC sign the
        /// requests. Only applicable in combination with the use of
        /// external/custom event projectors.</param>
        /// <param name="idField">Field in the projection to use as id field in
        /// queries. Defaults to the aggregate id.</param>
        public ProjectionDefinition(string projectionName, string feedName, IList<Handler> handlers, bool? aggregated = default(bool?), string signingSecret = default(string), string idField = default(string))
        {
            ProjectionName = projectionName;
            FeedName = feedName;
            Aggregated = aggregated;
            SigningSecret = signingSecret;
            IdField = idField;
            Handlers = handlers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the projection type
        /// </summary>
        [JsonProperty(PropertyName = "projectionName")]
        public string ProjectionName { get; set; }

        /// <summary>
        /// Gets or sets name of the feed
        /// </summary>
        [JsonProperty(PropertyName = "feedName")]
        public string FeedName { get; set; }

        /// <summary>
        /// Gets or sets dictates whether the definition should result in one
        /// projection per aggregate type or one projection per aggregateId.
        /// </summary>
        [JsonProperty(PropertyName = "aggregated")]
        public bool? Aggregated { get; set; }

        /// <summary>
        /// Gets or sets the secret key used to HMAC sign the requests. Only
        /// applicable in combination with the use of external/custom event
        /// projectors.
        /// </summary>
        [JsonProperty(PropertyName = "signingSecret")]
        public string SigningSecret { get; set; }

        /// <summary>
        /// Gets or sets field in the projection to use as id field in queries.
        /// Defaults to the aggregate id.
        /// </summary>
        [JsonProperty(PropertyName = "idField")]
        public string IdField { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "handlers")]
        public IList<Handler> Handlers { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProjectionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProjectionName");
            }
            if (FeedName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FeedName");
            }
            if (Handlers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Handlers");
            }
            if (ProjectionName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(ProjectionName, "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ProjectionName", "^[a-z0-9]+[a-z0-9\\-_]+[a-z0-9]+$");
                }
            }
            if (Handlers != null)
            {
                foreach (var element in Handlers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
