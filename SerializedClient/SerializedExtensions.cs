// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SerializedClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Serialized.
    /// </summary>
    public static partial class SerializedExtensions
    {
            /// <summary>
            /// Store events
            /// </summary>
            /// <remarks>
            /// Stores all events in the request atomically. All events must refer to the
            /// same aggregate id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type.
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='eventBatch'>
            /// Batch of one or more events
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void StoreEvents(this ISerialized operations, string aggregateType, System.Guid aggregateId, EventBatch eventBatch, string serializedTenantId = default(string))
            {
                operations.StoreEventsAsync(aggregateType, aggregateId, eventBatch, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store events
            /// </summary>
            /// <remarks>
            /// Stores all events in the request atomically. All events must refer to the
            /// same aggregate id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type.
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='eventBatch'>
            /// Batch of one or more events
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StoreEventsAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, EventBatch eventBatch, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StoreEventsWithHttpMessagesAsync(aggregateType, aggregateId, eventBatch, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Bulk Store events
            /// </summary>
            /// <remarks>
            /// Bulk stores all events in the request atomically. All events must refer to
            /// unique aggregate ids.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type.
            /// </param>
            /// <param name='bulk'>
            /// Bulk of one or more batches
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void BulkStoreEvents(this ISerialized operations, string aggregateType, Bulk bulk, string serializedTenantId = default(string))
            {
                operations.BulkStoreEventsAsync(aggregateType, bulk, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Bulk Store events
            /// </summary>
            /// <remarks>
            /// Bulk stores all events in the request atomically. All events must refer to
            /// unique aggregate ids.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type.
            /// </param>
            /// <param name='bulk'>
            /// Bulk of one or more batches
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BulkStoreEventsAsync(this ISerialized operations, string aggregateType, Bulk bulk, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BulkStoreEventsWithHttpMessagesAsync(aggregateType, bulk, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete all aggregates by type
            /// </summary>
            /// <remarks>
            /// Permanently delete all aggregates, including all events, for given
            /// aggregate type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response of the first DELETE
            /// request.
            /// </param>
            public static DeleteAggregatesByTypeOKResponse DeleteAggregatesByType(this ISerialized operations, string aggregateType, string serializedTenantId = default(string), System.Guid? deleteToken = default(System.Guid?))
            {
                return operations.DeleteAggregatesByTypeAsync(aggregateType, serializedTenantId, deleteToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all aggregates by type
            /// </summary>
            /// <remarks>
            /// Permanently delete all aggregates, including all events, for given
            /// aggregate type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response of the first DELETE
            /// request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteAggregatesByTypeOKResponse> DeleteAggregatesByTypeAsync(this ISerialized operations, string aggregateType, string serializedTenantId = default(string), System.Guid? deleteToken = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAggregatesByTypeWithHttpMessagesAsync(aggregateType, serializedTenantId, deleteToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List aggregates by type
            /// </summary>
            /// <remarks>
            /// List aggregates to get the current version and last updated time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='skip'>
            /// Optional number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional limit. Default is 1000.
            /// </param>
            public static ListAggregatesByTypeOKResponse ListAggregatesByType(this ISerialized operations, string aggregateType, string serializedTenantId = default(string), int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListAggregatesByTypeAsync(aggregateType, serializedTenantId, skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List aggregates by type
            /// </summary>
            /// <remarks>
            /// List aggregates to get the current version and last updated time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='skip'>
            /// Optional number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional limit. Default is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregatesByTypeOKResponse> ListAggregatesByTypeAsync(this ISerialized operations, string aggregateType, string serializedTenantId = default(string), int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAggregatesByTypeWithHttpMessagesAsync(aggregateType, serializedTenantId, skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if an aggregate exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void AggregateExists(this ISerialized operations, string aggregateType, System.Guid aggregateId, string serializedTenantId = default(string))
            {
                operations.AggregateExistsAsync(aggregateType, aggregateId, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if an aggregate exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AggregateExistsAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AggregateExistsWithHttpMessagesAsync(aggregateType, aggregateId, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete an aggregate
            /// </summary>
            /// <remarks>
            /// Permanently delete an aggregate, including all events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response to the first DELETE
            /// request.
            /// </param>
            public static DeleteAggregateOKResponse DeleteAggregate(this ISerialized operations, string aggregateType, System.Guid aggregateId, string serializedTenantId = default(string), System.Guid? deleteToken = default(System.Guid?))
            {
                return operations.DeleteAggregateAsync(aggregateType, aggregateId, serializedTenantId, deleteToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an aggregate
            /// </summary>
            /// <remarks>
            /// Permanently delete an aggregate, including all events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response to the first DELETE
            /// request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteAggregateOKResponse> DeleteAggregateAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, string serializedTenantId = default(string), System.Guid? deleteToken = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAggregateWithHttpMessagesAsync(aggregateType, aggregateId, serializedTenantId, deleteToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Load all events for an aggregate
            /// </summary>
            /// <remarks>
            /// By loading all events for a single aggregate we can derive the current
            /// state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='since'>
            /// Optional version number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional version limit. Default is 1000.
            /// </param>
            /// <param name='includeMetadata'>
            /// Adds timestamp and aggregateVersion to the response.
            /// </param>
            public static LoadEventsOKResponse LoadEvents(this ISerialized operations, string aggregateType, System.Guid aggregateId, string serializedTenantId = default(string), int? since = default(int?), int? limit = default(int?), bool? includeMetadata = false)
            {
                return operations.LoadEventsAsync(aggregateType, aggregateId, serializedTenantId, since, limit, includeMetadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load all events for an aggregate
            /// </summary>
            /// <remarks>
            /// By loading all events for a single aggregate we can derive the current
            /// state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='since'>
            /// Optional version number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional version limit. Default is 1000.
            /// </param>
            /// <param name='includeMetadata'>
            /// Adds timestamp and aggregateVersion to the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoadEventsOKResponse> LoadEventsAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, string serializedTenantId = default(string), int? since = default(int?), int? limit = default(int?), bool? includeMetadata = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadEventsWithHttpMessagesAsync(aggregateType, aggregateId, serializedTenantId, since, limit, includeMetadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get event feeds overview
            /// </summary>
            /// <remarks>
            /// Overview showing number of batches, aggregates and events per aggregate
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static ListFeedsOKResponse ListFeeds(this ISerialized operations, string serializedTenantId = default(string))
            {
                return operations.ListFeedsAsync(serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get event feeds overview
            /// </summary>
            /// <remarks>
            /// Overview showing number of batches, aggregates and events per aggregate
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListFeedsOKResponse> ListFeedsAsync(this ISerialized operations, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFeedsWithHttpMessagesAsync(serializedTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get current global sequence number
            /// </summary>
            /// <remarks>
            /// Get current global sequence number at head for all feeds
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static GetCurrentGlobalSequenceNumberHeaders GetCurrentGlobalSequenceNumber(this ISerialized operations, string serializedTenantId = default(string))
            {
                return operations.GetCurrentGlobalSequenceNumberAsync(serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get current global sequence number
            /// </summary>
            /// <remarks>
            /// Get current global sequence number at head for all feeds
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCurrentGlobalSequenceNumberHeaders> GetCurrentGlobalSequenceNumberAsync(this ISerialized operations, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentGlobalSequenceNumberWithHttpMessagesAsync(serializedTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get feed of events for all types
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates for all types (feed names). The payload
            /// is returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from (exclusive)
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            /// <param name='waitTime'>
            /// If provided, will generate a long-polling request. This is the maximum time
            /// (in ms) to wait before responding. Maximum value is 60000.
            /// </param>
            /// <param name='filterType'>
            /// If provided, filters the feed on the given aggregate types. Provide
            /// multiple values to filter on more than one aggregate type.
            /// </param>
            public static Feed FeedEvents(this ISerialized operations, string serializedTenantId = default(string), int? since = default(int?), int? limit = 1000, System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = 1, int? partitionNumber = 0, int? waitTime = 0, IList<string> filterType = default(IList<string>))
            {
                return operations.FeedEventsAsync(serializedTenantId, since, limit, fromParameter, to, partitionCount, partitionNumber, waitTime, filterType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get feed of events for all types
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates for all types (feed names). The payload
            /// is returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from (exclusive)
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            /// <param name='waitTime'>
            /// If provided, will generate a long-polling request. This is the maximum time
            /// (in ms) to wait before responding. Maximum value is 60000.
            /// </param>
            /// <param name='filterType'>
            /// If provided, filters the feed on the given aggregate types. Provide
            /// multiple values to filter on more than one aggregate type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> FeedEventsAsync(this ISerialized operations, string serializedTenantId = default(string), int? since = default(int?), int? limit = 1000, System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = 1, int? partitionNumber = 0, int? waitTime = 0, IList<string> filterType = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FeedEventsWithHttpMessagesAsync(serializedTenantId, since, limit, fromParameter, to, partitionCount, partitionNumber, waitTime, filterType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get total number of event batches
            /// </summary>
            /// <remarks>
            /// Get the total number of event batches.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive,
            /// 2017-07-21T17:32:28.
            /// </param>
            public static GetCountOKResponse GetCount(this ISerialized operations, string serializedTenantId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                return operations.GetCountAsync(serializedTenantId, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get total number of event batches
            /// </summary>
            /// <remarks>
            /// Get the total number of event batches.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive,
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCountOKResponse> GetCountAsync(this ISerialized operations, string serializedTenantId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCountWithHttpMessagesAsync(serializedTenantId, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get current sequence number
            /// </summary>
            /// <remarks>
            /// Get current sequence number at head for a given feed
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static GetCurrentSequenceNumberHeaders GetCurrentSequenceNumber(this ISerialized operations, string name, string serializedTenantId = default(string))
            {
                return operations.GetCurrentSequenceNumberAsync(name, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get current sequence number
            /// </summary>
            /// <remarks>
            /// Get current sequence number at head for a given feed
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCurrentSequenceNumberHeaders> GetCurrentSequenceNumberAsync(this ISerialized operations, string name, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentSequenceNumberWithHttpMessagesAsync(name, serializedTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get feed of events
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates given a type (feed name). The payload is
            /// returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed (aggregate type)
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from, exclusive.
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive,
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            /// <param name='waitTime'>
            /// If provided, will generate a long-polling request. This is the maximum time
            /// (in ms) to wait before responding. Maximum value is 60000.
            /// </param>
            public static Feed FeedEventsByType(this ISerialized operations, string name, string serializedTenantId = default(string), int? since = default(int?), int? limit = 1000, System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = 1, int? partitionNumber = 0, int? waitTime = 0)
            {
                return operations.FeedEventsByTypeAsync(name, serializedTenantId, since, limit, fromParameter, to, partitionCount, partitionNumber, waitTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get feed of events
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates given a type (feed name). The payload is
            /// returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed (aggregate type)
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from, exclusive.
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive,
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            /// <param name='waitTime'>
            /// If provided, will generate a long-polling request. This is the maximum time
            /// (in ms) to wait before responding. Maximum value is 60000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> FeedEventsByTypeAsync(this ISerialized operations, string name, string serializedTenantId = default(string), int? since = default(int?), int? limit = 1000, System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = 1, int? partitionNumber = 0, int? waitTime = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FeedEventsByTypeWithHttpMessagesAsync(name, serializedTenantId, since, limit, fromParameter, to, partitionCount, partitionNumber, waitTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get total number of event batches
            /// </summary>
            /// <remarks>
            /// Get the number of event batches for a given aggregate type (feed name).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed (aggregate type)
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive,
            /// 2017-07-21T17:32:28.
            /// </param>
            public static GetCountByTypeOKResponse GetCountByType(this ISerialized operations, string name, string serializedTenantId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                return operations.GetCountByTypeAsync(name, serializedTenantId, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get total number of event batches
            /// </summary>
            /// <remarks>
            /// Get the number of event batches for a given aggregate type (feed name).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed (aggregate type)
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, inclusive, eg.
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, exclusive,
            /// 2017-07-21T17:32:28.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCountByTypeOKResponse> GetCountByTypeAsync(this ISerialized operations, string name, string serializedTenantId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCountByTypeWithHttpMessagesAsync(name, serializedTenantId, fromParameter, to, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List reactions
            /// </summary>
            /// <remarks>
            /// List reactions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='status'>
            /// Status to filter. Possible values are: SCHEDULED, READY, ONGOING,
            /// COMPLETED, CANCELED, FAILED.
            /// </param>
            /// <param name='fromParameter'>
            /// Filter 'triggerAt' timestamp from, inclusive.
            /// </param>
            /// <param name='to'>
            /// Filter 'triggerAt' timestamp to, exclusive.
            /// </param>
            /// <param name='aggregateId'>
            /// Filter by aggregate ID.
            /// </param>
            /// <param name='eventId'>
            /// Filter by event ID.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 10.
            /// </param>
            public static Reactions ListReactions(this ISerialized operations, string serializedTenantId = default(string), string status = "ALL", string fromParameter = default(string), string to = default(string), string aggregateId = default(string), string eventId = default(string), int? skip = 0, int? limit = 10)
            {
                return operations.ListReactionsAsync(serializedTenantId, status, fromParameter, to, aggregateId, eventId, skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List reactions
            /// </summary>
            /// <remarks>
            /// List reactions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='status'>
            /// Status to filter. Possible values are: SCHEDULED, READY, ONGOING,
            /// COMPLETED, CANCELED, FAILED.
            /// </param>
            /// <param name='fromParameter'>
            /// Filter 'triggerAt' timestamp from, inclusive.
            /// </param>
            /// <param name='to'>
            /// Filter 'triggerAt' timestamp to, exclusive.
            /// </param>
            /// <param name='aggregateId'>
            /// Filter by aggregate ID.
            /// </param>
            /// <param name='eventId'>
            /// Filter by event ID.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 10.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reactions> ListReactionsAsync(this ISerialized operations, string serializedTenantId = default(string), string status = "ALL", string fromParameter = default(string), string to = default(string), string aggregateId = default(string), string eventId = default(string), int? skip = 0, int? limit = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReactionsWithHttpMessagesAsync(serializedTenantId, status, fromParameter, to, aggregateId, eventId, skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a scheduled reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to delete a reaction that has not yet been
            /// executed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the scheduled reaction to delete.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void DeleteScheduledReaction(this ISerialized operations, System.Guid reactionId, string serializedTenantId = default(string))
            {
                operations.DeleteScheduledReactionAsync(reactionId, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a scheduled reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to delete a reaction that has not yet been
            /// executed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the scheduled reaction to delete.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteScheduledReactionAsync(this ISerialized operations, System.Guid reactionId, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteScheduledReactionWithHttpMessagesAsync(reactionId, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Execute a scheduled or completed reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to execute a scheduled or completed reaction.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the reaction to execute.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void ExecuteReaction(this ISerialized operations, System.Guid reactionId, string serializedTenantId = default(string))
            {
                operations.ExecuteReactionAsync(reactionId, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a scheduled or completed reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to execute a scheduled or completed reaction.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the reaction to execute.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExecuteReactionAsync(this ISerialized operations, System.Guid reactionId, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ExecuteReactionWithHttpMessagesAsync(reactionId, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List reaction definitions
            /// </summary>
            /// <remarks>
            /// List all reaction definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            public static ReactionDefinitions ListReactionDefinitions(this ISerialized operations, int? skip = 0, int? limit = 100)
            {
                return operations.ListReactionDefinitionsAsync(skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List reaction definitions
            /// </summary>
            /// <remarks>
            /// List all reaction definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReactionDefinitions> ListReactionDefinitionsAsync(this ISerialized operations, int? skip = 0, int? limit = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReactionDefinitionsWithHttpMessagesAsync(skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create reaction definition
            /// </summary>
            /// <remarks>
            /// Create a new reaction definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            public static void CreateReactionDefinition(this ISerialized operations, ReactionDefinition reactionDefinition)
            {
                operations.CreateReactionDefinitionAsync(reactionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create reaction definition
            /// </summary>
            /// <remarks>
            /// Create a new reaction definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateReactionDefinitionAsync(this ISerialized operations, ReactionDefinition reactionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateReactionDefinitionWithHttpMessagesAsync(reactionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='keepScheduledReactions'>
            /// Keep existing scheduled reactions
            /// </param>
            public static void DeleteReactionDefinition(this ISerialized operations, string reactionName, bool? keepScheduledReactions = false)
            {
                operations.DeleteReactionDefinitionAsync(reactionName, keepScheduledReactions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='keepScheduledReactions'>
            /// Keep existing scheduled reactions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReactionDefinitionAsync(this ISerialized operations, string reactionName, bool? keepScheduledReactions = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReactionDefinitionWithHttpMessagesAsync(reactionName, keepScheduledReactions, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            public static ReactionDefinition GetReactionDefinition(this ISerialized operations, string reactionName)
            {
                return operations.GetReactionDefinitionAsync(reactionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReactionDefinition> GetReactionDefinitionAsync(this ISerialized operations, string reactionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReactionDefinitionWithHttpMessagesAsync(reactionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            public static void CreateOrUpdateReactionDefinition(this ISerialized operations, string reactionName, ReactionDefinition reactionDefinition)
            {
                operations.CreateOrUpdateReactionDefinitionAsync(reactionName, reactionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrUpdateReactionDefinitionAsync(this ISerialized operations, string reactionName, ReactionDefinition reactionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateOrUpdateReactionDefinitionWithHttpMessagesAsync(reactionName, reactionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get projections overview
            /// </summary>
            /// <remarks>
            /// Includes projection names and count
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static ListProjectionsOKResponse ListProjections(this ISerialized operations, string serializedTenantId = default(string))
            {
                return operations.ListProjectionsAsync(serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get projections overview
            /// </summary>
            /// <remarks>
            /// Includes projection names and count
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListProjectionsOKResponse> ListProjectionsAsync(this ISerialized operations, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProjectionsWithHttpMessagesAsync(serializedTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List projection definitions
            /// </summary>
            /// <remarks>
            /// List all definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            public static ProjectionDefinitions ListProjectionDefinitions(this ISerialized operations, int? skip = 0, int? limit = 100)
            {
                return operations.ListProjectionDefinitionsAsync(skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List projection definitions
            /// </summary>
            /// <remarks>
            /// List all definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectionDefinitions> ListProjectionDefinitionsAsync(this ISerialized operations, int? skip = 0, int? limit = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProjectionDefinitionsWithHttpMessagesAsync(skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a projection definition
            /// </summary>
            /// <remarks>
            /// Create a new definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            public static void CreateProjectionDefinition(this ISerialized operations, ProjectionDefinition projectionDefinition)
            {
                operations.CreateProjectionDefinitionAsync(projectionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a projection definition
            /// </summary>
            /// <remarks>
            /// Create a new definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProjectionDefinitionAsync(this ISerialized operations, ProjectionDefinition projectionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateProjectionDefinitionWithHttpMessagesAsync(projectionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static ProjectionDefinition GetProjectionDefinition(this ISerialized operations, string projectionName)
            {
                return operations.GetProjectionDefinitionAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectionDefinition> GetProjectionDefinitionAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectionDefinitionWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a projection definition
            /// </summary>
            /// <remarks>
            /// Create or update a definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            public static void CreateOrUpdateProjectionDefinition(this ISerialized operations, string projectionName, ProjectionDefinition projectionDefinition)
            {
                operations.CreateOrUpdateProjectionDefinitionAsync(projectionName, projectionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a projection definition
            /// </summary>
            /// <remarks>
            /// Create or update a definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrUpdateProjectionDefinitionAsync(this ISerialized operations, string projectionName, ProjectionDefinition projectionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateOrUpdateProjectionDefinitionWithHttpMessagesAsync(projectionName, projectionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static void DeleteProjectionDefinition(this ISerialized operations, string projectionName)
            {
                operations.DeleteProjectionDefinitionAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProjectionDefinitionAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProjectionDefinitionWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List single projections
            /// </summary>
            /// <remarks>
            /// List all single projections
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='reference'>
            /// Reference string to filter on. See JsonPath 'setref' for details.
            /// </param>
            /// <param name='fromParameter'>
            /// Filter reference value from, inclusive. Usable if reference is a date or
            /// timestamp.
            /// </param>
            /// <param name='to'>
            /// Filter reference value to, inclusive. Usable if reference is a date or
            /// timestamp.
            /// </param>
            /// <param name='search'>
            /// String to search for. The projection has to be created with
            /// 'indexedFields'.
            /// </param>
            /// <param name='sort'>
            /// Sort string. Any combination of the following fields: projectionId,
            /// reference, createdAt, updatedAt. Add '+' and '-' prefixes to indicate
            /// ascending/descending sort order. Ascending order is default.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='id'>
            /// If provided, filters on the projection id(s) to only get the specified
            /// projections. Provide multiple values to retrieve multiple projections in
            /// the response.
            /// </param>
            public static Projections ListSingleProjections(this ISerialized operations, string projectionName, string serializedTenantId = default(string), string reference = default(string), string fromParameter = default(string), string to = default(string), string search = default(string), string sort = default(string), int? skip = 0, int? limit = 100, IList<string> id = default(IList<string>))
            {
                return operations.ListSingleProjectionsAsync(projectionName, serializedTenantId, reference, fromParameter, to, search, sort, skip, limit, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List single projections
            /// </summary>
            /// <remarks>
            /// List all single projections
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='reference'>
            /// Reference string to filter on. See JsonPath 'setref' for details.
            /// </param>
            /// <param name='fromParameter'>
            /// Filter reference value from, inclusive. Usable if reference is a date or
            /// timestamp.
            /// </param>
            /// <param name='to'>
            /// Filter reference value to, inclusive. Usable if reference is a date or
            /// timestamp.
            /// </param>
            /// <param name='search'>
            /// String to search for. The projection has to be created with
            /// 'indexedFields'.
            /// </param>
            /// <param name='sort'>
            /// Sort string. Any combination of the following fields: projectionId,
            /// reference, createdAt, updatedAt. Add '+' and '-' prefixes to indicate
            /// ascending/descending sort order. Ascending order is default.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='id'>
            /// If provided, filters on the projection id(s) to only get the specified
            /// projections. Provide multiple values to retrieve multiple projections in
            /// the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projections> ListSingleProjectionsAsync(this ISerialized operations, string projectionName, string serializedTenantId = default(string), string reference = default(string), string fromParameter = default(string), string to = default(string), string search = default(string), string sort = default(string), int? skip = 0, int? limit = 100, IList<string> id = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSingleProjectionsWithHttpMessagesAsync(projectionName, serializedTenantId, reference, fromParameter, to, search, sort, skip, limit, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete/recreate single projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void RecreateSingleProjections(this ISerialized operations, string projectionName, string serializedTenantId = default(string))
            {
                operations.RecreateSingleProjectionsAsync(projectionName, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete/recreate single projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecreateSingleProjectionsAsync(this ISerialized operations, string projectionName, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RecreateSingleProjectionsWithHttpMessagesAsync(projectionName, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get single projection count
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='reference'>
            /// Optional reference string to filter on.
            /// </param>
            public static ProjectionCount GetSingleProjectionCount(this ISerialized operations, string projectionName, string serializedTenantId = default(string), string reference = default(string))
            {
                return operations.GetSingleProjectionCountAsync(projectionName, serializedTenantId, reference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get single projection count
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='reference'>
            /// Optional reference string to filter on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectionCount> GetSingleProjectionCountAsync(this ISerialized operations, string projectionName, string serializedTenantId = default(string), string reference = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleProjectionCountWithHttpMessagesAsync(projectionName, serializedTenantId, reference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get single projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionId'>
            /// The projectionId
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='awaitCreation'>
            /// Max number of milliseconds to await the initial creation. Must be between 1
            /// and 60000.
            /// </param>
            public static Projection GetSingleProjection(this ISerialized operations, string projectionName, System.Guid projectionId, string serializedTenantId = default(string), int? awaitCreation = 0)
            {
                return operations.GetSingleProjectionAsync(projectionName, projectionId, serializedTenantId, awaitCreation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get single projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionId'>
            /// The projectionId
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='awaitCreation'>
            /// Max number of milliseconds to await the initial creation. Must be between 1
            /// and 60000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projection> GetSingleProjectionAsync(this ISerialized operations, string projectionName, System.Guid projectionId, string serializedTenantId = default(string), int? awaitCreation = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleProjectionWithHttpMessagesAsync(projectionName, projectionId, serializedTenantId, awaitCreation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get aggregated projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static Projection GetAggregatedProjection(this ISerialized operations, string projectionName, string serializedTenantId = default(string))
            {
                return operations.GetAggregatedProjectionAsync(projectionName, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get aggregated projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projection> GetAggregatedProjectionAsync(this ISerialized operations, string projectionName, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregatedProjectionWithHttpMessagesAsync(projectionName, serializedTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete/recreate aggregated projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            public static void RecreateAggregatedProjections(this ISerialized operations, string projectionName, string serializedTenantId = default(string))
            {
                operations.RecreateAggregatedProjectionsAsync(projectionName, serializedTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete/recreate aggregated projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='serializedTenantId'>
            /// The optional ID of the tenant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecreateAggregatedProjectionsAsync(this ISerialized operations, string projectionName, string serializedTenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RecreateAggregatedProjectionsWithHttpMessagesAsync(projectionName, serializedTenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List tenants
            /// </summary>
            /// <remarks>
            /// List tenants
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Tenants ListTenants(this ISerialized operations)
            {
                return operations.ListTenantsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List tenants
            /// </summary>
            /// <remarks>
            /// List tenants
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tenants> ListTenantsAsync(this ISerialized operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTenantsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add tenant
            /// </summary>
            /// <remarks>
            /// Add tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenant'>
            /// Tenant
            /// </param>
            public static void AddTenant(this ISerialized operations, Tenant tenant)
            {
                operations.AddTenantAsync(tenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add tenant
            /// </summary>
            /// <remarks>
            /// Add tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenant'>
            /// Tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddTenantAsync(this ISerialized operations, Tenant tenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddTenantWithHttpMessagesAsync(tenant, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update tenant
            /// </summary>
            /// <remarks>
            /// Update tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            /// <param name='tenant'>
            /// Tenant
            /// </param>
            public static void UpdateTenant(this ISerialized operations, string tenantId, Tenant tenant)
            {
                operations.UpdateTenantAsync(tenantId, tenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update tenant
            /// </summary>
            /// <remarks>
            /// Update tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            /// <param name='tenant'>
            /// Tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateTenantAsync(this ISerialized operations, string tenantId, Tenant tenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateTenantWithHttpMessagesAsync(tenantId, tenant, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete tenant
            /// </summary>
            /// <remarks>
            /// Delete tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            public static void DeleteTenant(this ISerialized operations, System.Guid tenantId)
            {
                operations.DeleteTenantAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete tenant
            /// </summary>
            /// <remarks>
            /// Delete tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTenantAsync(this ISerialized operations, System.Guid tenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTenantWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Undelete tenant
            /// </summary>
            /// <remarks>
            /// Undelete tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            public static void UndeleteTenant(this ISerialized operations, string tenantId)
            {
                operations.UndeleteTenantAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Undelete tenant
            /// </summary>
            /// <remarks>
            /// Undelete tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UndeleteTenantAsync(this ISerialized operations, string tenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UndeleteTenantWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
