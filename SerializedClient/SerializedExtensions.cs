// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SerializedClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Serialized.
    /// </summary>
    public static partial class SerializedExtensions
    {
            /// <summary>
            /// Store events
            /// </summary>
            /// <remarks>
            /// Stores all events in the request atomically. All events must refer to the
            /// same aggregate id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type.
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='eventBatch'>
            /// Batch of one or more events
            /// </param>
            public static void StoreEvents(this ISerialized operations, string aggregateType, System.Guid aggregateId, EventBatch eventBatch)
            {
                operations.StoreEventsAsync(aggregateType, aggregateId, eventBatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store events
            /// </summary>
            /// <remarks>
            /// Stores all events in the request atomically. All events must refer to the
            /// same aggregate id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type.
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='eventBatch'>
            /// Batch of one or more events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StoreEventsAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, EventBatch eventBatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StoreEventsWithHttpMessagesAsync(aggregateType, aggregateId, eventBatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete all aggregates by type
            /// </summary>
            /// <remarks>
            /// Permanently delete all aggregates, including all events, for given
            /// aggregate type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response to the first DELETE
            /// request.
            /// </param>
            public static DeleteAggregatesByTypeOKResponse DeleteAggregatesByType(this ISerialized operations, string aggregateType, System.Guid? deleteToken = default(System.Guid?))
            {
                return operations.DeleteAggregatesByTypeAsync(aggregateType, deleteToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all aggregates by type
            /// </summary>
            /// <remarks>
            /// Permanently delete all aggregates, including all events, for given
            /// aggregate type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response to the first DELETE
            /// request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteAggregatesByTypeOKResponse> DeleteAggregatesByTypeAsync(this ISerialized operations, string aggregateType, System.Guid? deleteToken = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAggregatesByTypeWithHttpMessagesAsync(aggregateType, deleteToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if an aggregate exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            public static void AggregateExists(this ISerialized operations, string aggregateType, System.Guid aggregateId)
            {
                operations.AggregateExistsAsync(aggregateType, aggregateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if an aggregate exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AggregateExistsAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AggregateExistsWithHttpMessagesAsync(aggregateType, aggregateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete an aggregate
            /// </summary>
            /// <remarks>
            /// Permanently delete an aggregate, including all events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response to the first DELETE
            /// request.
            /// </param>
            public static DeleteAggregateOKResponse DeleteAggregate(this ISerialized operations, string aggregateType, System.Guid aggregateId, System.Guid? deleteToken = default(System.Guid?))
            {
                return operations.DeleteAggregateAsync(aggregateType, aggregateId, deleteToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an aggregate
            /// </summary>
            /// <remarks>
            /// Permanently delete an aggregate, including all events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='deleteToken'>
            /// Valid delete token. Will be included in the response to the first DELETE
            /// request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteAggregateOKResponse> DeleteAggregateAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, System.Guid? deleteToken = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAggregateWithHttpMessagesAsync(aggregateType, aggregateId, deleteToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Load all events for an aggregate
            /// </summary>
            /// <remarks>
            /// By loading all events for a single aggregate we can derive the current
            /// state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='since'>
            /// Optional version number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional version limit. Default is 1000.
            /// </param>
            public static LoadEventsOKResponse LoadEvents(this ISerialized operations, string aggregateType, System.Guid aggregateId, int? since = default(int?), int? limit = default(int?))
            {
                return operations.LoadEventsAsync(aggregateType, aggregateId, since, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load all events for an aggregate
            /// </summary>
            /// <remarks>
            /// By loading all events for a single aggregate we can derive the current
            /// state.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregateType'>
            /// The name of the aggregate type
            /// </param>
            /// <param name='aggregateId'>
            /// The unique id of the aggregate
            /// </param>
            /// <param name='since'>
            /// Optional version number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional version limit. Default is 1000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoadEventsOKResponse> LoadEventsAsync(this ISerialized operations, string aggregateType, System.Guid aggregateId, int? since = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadEventsWithHttpMessagesAsync(aggregateType, aggregateId, since, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get event feeds overview
            /// </summary>
            /// <remarks>
            /// Overview showing number of batches, aggregates and events per aggregate
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ListFeedsOKResponse ListFeeds(this ISerialized operations)
            {
                return operations.ListFeedsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get event feeds overview
            /// </summary>
            /// <remarks>
            /// Overview showing number of batches, aggregates and events per aggregate
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListFeedsOKResponse> ListFeedsAsync(this ISerialized operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFeedsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get current global sequence number
            /// </summary>
            /// <remarks>
            /// Get current global sequence number at head for all feeds
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetCurrentGlobalSequenceNumberHeaders GetCurrentGlobalSequenceNumber(this ISerialized operations)
            {
                return operations.GetCurrentGlobalSequenceNumberAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get current global sequence number
            /// </summary>
            /// <remarks>
            /// Get current global sequence number at head for all feeds
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCurrentGlobalSequenceNumberHeaders> GetCurrentGlobalSequenceNumberAsync(this ISerialized operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentGlobalSequenceNumberWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get feed of events for all types
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates for all types (feed names). The payload
            /// is returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, eg. 2017-07-21T17:32:28.
            /// Must be used in combination with 'to' parameter.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, eg. 2017-07-21T17:32:28.
            /// Must be used in combination with 'from' parameter.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            public static Feed FeedEvents(this ISerialized operations, int? since = default(int?), int? limit = default(int?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = default(int?), int? partitionNumber = default(int?))
            {
                return operations.FeedEventsAsync(since, limit, fromParameter, to, partitionCount, partitionNumber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get feed of events for all types
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates for all types (feed names). The payload
            /// is returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, eg. 2017-07-21T17:32:28.
            /// Must be used in combination with 'to' parameter.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, eg. 2017-07-21T17:32:28.
            /// Must be used in combination with 'from' parameter.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> FeedEventsAsync(this ISerialized operations, int? since = default(int?), int? limit = default(int?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = default(int?), int? partitionNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FeedEventsWithHttpMessagesAsync(since, limit, fromParameter, to, partitionCount, partitionNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get current sequence number
            /// </summary>
            /// <remarks>
            /// Get current sequence number at head for a given feed
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed
            /// </param>
            public static GetCurrentSequenceNumberHeaders GetCurrentSequenceNumber(this ISerialized operations, string name)
            {
                return operations.GetCurrentSequenceNumberAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get current sequence number
            /// </summary>
            /// <remarks>
            /// Get current sequence number at head for a given feed
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetCurrentSequenceNumberHeaders> GetCurrentSequenceNumberAsync(this ISerialized operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentSequenceNumberWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get feed of events
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates given a type (feed name). The payload is
            /// returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed (aggregate type)
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, eg. 2017-07-21T17:32:28.
            /// Must be used in combination with 'to' parameter.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, 2017-07-21T17:32:28. Must be
            /// used in combination with 'from' parameter.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            public static Feed FeedEventsByType(this ISerialized operations, string name, int? since = default(int?), int? limit = default(int?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = default(int?), int? partitionNumber = default(int?))
            {
                return operations.FeedEventsByTypeAsync(name, since, limit, fromParameter, to, partitionCount, partitionNumber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get feed of events
            /// </summary>
            /// <remarks>
            /// Get all events for all aggregates given a type (feed name). The payload is
            /// returned with the event batches in insertion order, each with a unique
            /// sequence number.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the feed (aggregate type)
            /// </param>
            /// <param name='since'>
            /// Optional sequence number to start from
            /// </param>
            /// <param name='limit'>
            /// Optional response limit. Default is 1000.
            /// </param>
            /// <param name='fromParameter'>
            /// Optional ISO 8601 date-time string to start from, eg. 2017-07-21T17:32:28.
            /// Must be used in combination with 'to' parameter.
            /// </param>
            /// <param name='to'>
            /// Optional ISO 8601 date-time string to stop at, 2017-07-21T17:32:28. Must be
            /// used in combination with 'from' parameter.
            /// </param>
            /// <param name='partitionCount'>
            /// The expected total number of partitions, i.e. the total number of consumers
            /// feeding in parallel.
            /// </param>
            /// <param name='partitionNumber'>
            /// The partition number to request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Feed> FeedEventsByTypeAsync(this ISerialized operations, string name, int? since = default(int?), int? limit = default(int?), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), int? partitionCount = default(int?), int? partitionNumber = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FeedEventsByTypeWithHttpMessagesAsync(name, since, limit, fromParameter, to, partitionCount, partitionNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List scheduled reactions
            /// </summary>
            /// <remarks>
            /// List all scheduled definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 10.
            /// </param>
            public static Reactions ListScheduledReactions(this ISerialized operations, int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListScheduledReactionsAsync(skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List scheduled reactions
            /// </summary>
            /// <remarks>
            /// List all scheduled definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 10.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reactions> ListScheduledReactionsAsync(this ISerialized operations, int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListScheduledReactionsWithHttpMessagesAsync(skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a scheduled reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to delete a reaction that has not yet been
            /// executed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the scheduled reaction to delete.
            /// </param>
            public static void DeleteScheduledReaction(this ISerialized operations, System.Guid reactionId)
            {
                operations.DeleteScheduledReactionAsync(reactionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a scheduled reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to delete a reaction that has not yet been
            /// executed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the scheduled reaction to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteScheduledReactionAsync(this ISerialized operations, System.Guid reactionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteScheduledReactionWithHttpMessagesAsync(reactionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Execute a scheduled reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to execute a scheduled reaction without waiting
            /// for the trigger to fire.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the scheduled reaction to delete.
            /// </param>
            public static void ExecuteScheduledReaction(this ISerialized operations, System.Guid reactionId)
            {
                operations.ExecuteScheduledReactionAsync(reactionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a scheduled reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to execute a scheduled reaction without waiting
            /// for the trigger to fire.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the scheduled reaction to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExecuteScheduledReactionAsync(this ISerialized operations, System.Guid reactionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ExecuteScheduledReactionWithHttpMessagesAsync(reactionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List triggered reactions
            /// </summary>
            /// <remarks>
            /// List all reactions that have been executed already.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 10.
            /// </param>
            public static Reactions ListTriggeredReactions(this ISerialized operations, int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListTriggeredReactionsAsync(skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List triggered reactions
            /// </summary>
            /// <remarks>
            /// List all reactions that have been executed already.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 10.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reactions> ListTriggeredReactionsAsync(this ISerialized operations, int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredReactionsWithHttpMessagesAsync(skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Re-execute a triggered reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to re-execute an already executed reaction.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the reaction to re-execute.
            /// </param>
            public static void ReExecuteTriggeredReaction(this ISerialized operations, System.Guid reactionId)
            {
                operations.ReExecuteTriggeredReactionAsync(reactionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Re-execute a triggered reaction
            /// </summary>
            /// <remarks>
            /// This endpoint allows you to re-execute an already executed reaction.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionId'>
            /// ID of the reaction to re-execute.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReExecuteTriggeredReactionAsync(this ISerialized operations, System.Guid reactionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReExecuteTriggeredReactionWithHttpMessagesAsync(reactionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List reaction definitions
            /// </summary>
            /// <remarks>
            /// List all reaction definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            public static ReactionDefinitions ListReactionDefinitions(this ISerialized operations, int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListReactionDefinitionsAsync(skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List reaction definitions
            /// </summary>
            /// <remarks>
            /// List all reaction definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReactionDefinitions> ListReactionDefinitionsAsync(this ISerialized operations, int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReactionDefinitionsWithHttpMessagesAsync(skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create reaction definition
            /// </summary>
            /// <remarks>
            /// Create a new reaction definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            public static void CreateReactionDefinition(this ISerialized operations, ReactionDefinition reactionDefinition)
            {
                operations.CreateReactionDefinitionAsync(reactionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create reaction definition
            /// </summary>
            /// <remarks>
            /// Create a new reaction definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateReactionDefinitionAsync(this ISerialized operations, ReactionDefinition reactionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateReactionDefinitionWithHttpMessagesAsync(reactionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            public static void DeleteReactionDefinition(this ISerialized operations, string reactionName)
            {
                operations.DeleteReactionDefinitionAsync(reactionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReactionDefinitionAsync(this ISerialized operations, string reactionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReactionDefinitionWithHttpMessagesAsync(reactionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            public static ReactionDefinition GetReactionDefinition(this ISerialized operations, string reactionName)
            {
                return operations.GetReactionDefinitionAsync(reactionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReactionDefinition> GetReactionDefinitionAsync(this ISerialized operations, string reactionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReactionDefinitionWithHttpMessagesAsync(reactionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            public static void CreateOrUpdateReactionDefinition(this ISerialized operations, string reactionName, ReactionDefinition reactionDefinition)
            {
                operations.CreateOrUpdateReactionDefinitionAsync(reactionName, reactionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update reaction definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reactionName'>
            /// The reaction name
            /// </param>
            /// <param name='reactionDefinition'>
            /// The reaction definition
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrUpdateReactionDefinitionAsync(this ISerialized operations, string reactionName, ReactionDefinition reactionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateOrUpdateReactionDefinitionWithHttpMessagesAsync(reactionName, reactionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get projections overview
            /// </summary>
            /// <remarks>
            /// Includes projection names and count
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ListProjectionsOKResponse ListProjections(this ISerialized operations)
            {
                return operations.ListProjectionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get projections overview
            /// </summary>
            /// <remarks>
            /// Includes projection names and count
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListProjectionsOKResponse> ListProjectionsAsync(this ISerialized operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProjectionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List projection definitions
            /// </summary>
            /// <remarks>
            /// List all definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            public static ProjectionDefinitions ListProjectionDefinitions(this ISerialized operations, int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListProjectionDefinitionsAsync(skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List projection definitions
            /// </summary>
            /// <remarks>
            /// List all definitions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectionDefinitions> ListProjectionDefinitionsAsync(this ISerialized operations, int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProjectionDefinitionsWithHttpMessagesAsync(skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a projection definition
            /// </summary>
            /// <remarks>
            /// Create a new definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            public static void CreateProjectionDefinition(this ISerialized operations, ProjectionDefinition projectionDefinition)
            {
                operations.CreateProjectionDefinitionAsync(projectionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a projection definition
            /// </summary>
            /// <remarks>
            /// Create a new definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProjectionDefinitionAsync(this ISerialized operations, ProjectionDefinition projectionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateProjectionDefinitionWithHttpMessagesAsync(projectionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static ProjectionDefinition GetProjectionDefinition(this ISerialized operations, string projectionName)
            {
                return operations.GetProjectionDefinitionAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectionDefinition> GetProjectionDefinitionAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectionDefinitionWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a projection definition
            /// </summary>
            /// <remarks>
            /// Create or update a definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            public static void CreateOrUpdateProjectionDefinition(this ISerialized operations, string projectionName, ProjectionDefinition projectionDefinition)
            {
                operations.CreateOrUpdateProjectionDefinitionAsync(projectionName, projectionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a projection definition
            /// </summary>
            /// <remarks>
            /// Create or update a definition
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionDefinition'>
            /// Definition of the projection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrUpdateProjectionDefinitionAsync(this ISerialized operations, string projectionName, ProjectionDefinition projectionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateOrUpdateProjectionDefinitionWithHttpMessagesAsync(projectionName, projectionDefinition, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static void DeleteProjectionDefinition(this ISerialized operations, string projectionName)
            {
                operations.DeleteProjectionDefinitionAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete projection definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProjectionDefinitionAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProjectionDefinitionWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List single projections
            /// </summary>
            /// <remarks>
            /// List all single projections
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='reference'>
            /// Reference string to filter on. See JsonPath 'setref' for details.
            /// </param>
            /// <param name='sort'>
            /// Sort string. Any combination of the following fields: projectionId,
            /// reference, createdAt, updatedAt. Add '+' and '-' prefixes to indicate
            /// ascending/descending sort order. Ascending order is default.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            public static Projections ListSingleProjections(this ISerialized operations, string projectionName, string reference = default(string), string sort = default(string), int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListSingleProjectionsAsync(projectionName, reference, sort, skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List single projections
            /// </summary>
            /// <remarks>
            /// List all single projections
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='reference'>
            /// Reference string to filter on. See JsonPath 'setref' for details.
            /// </param>
            /// <param name='sort'>
            /// Sort string. Any combination of the following fields: projectionId,
            /// reference, createdAt, updatedAt. Add '+' and '-' prefixes to indicate
            /// ascending/descending sort order. Ascending order is default.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projections> ListSingleProjectionsAsync(this ISerialized operations, string projectionName, string reference = default(string), string sort = default(string), int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSingleProjectionsWithHttpMessagesAsync(projectionName, reference, sort, skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete/recreate single projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static void RecreateSingleProjections(this ISerialized operations, string projectionName)
            {
                operations.RecreateSingleProjectionsAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete/recreate single projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecreateSingleProjectionsAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RecreateSingleProjectionsWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get single projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionId'>
            /// The projectionId
            /// </param>
            /// <param name='awaitCreation'>
            /// Max number of milliseconds to await the initial creation. Must be between 1
            /// and 60000.
            /// </param>
            public static Projection GetSingleProjection(this ISerialized operations, string projectionName, System.Guid projectionId, int? awaitCreation = default(int?))
            {
                return operations.GetSingleProjectionAsync(projectionName, projectionId, awaitCreation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get single projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='projectionId'>
            /// The projectionId
            /// </param>
            /// <param name='awaitCreation'>
            /// Max number of milliseconds to await the initial creation. Must be between 1
            /// and 60000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projection> GetSingleProjectionAsync(this ISerialized operations, string projectionName, System.Guid projectionId, int? awaitCreation = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleProjectionWithHttpMessagesAsync(projectionName, projectionId, awaitCreation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List aggregated projections
            /// </summary>
            /// <remarks>
            /// List all aggregated projections
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sort'>
            /// Sort string. Any combination of the following fields: projectionId,
            /// createdAt, updatedAt. Add '+' and '-' prefixes to indicate
            /// ascending/descending sort order. Ascending order is default.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            public static Projections ListAggregatedProjections(this ISerialized operations, string sort = default(string), int? skip = default(int?), int? limit = default(int?))
            {
                return operations.ListAggregatedProjectionsAsync(sort, skip, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List aggregated projections
            /// </summary>
            /// <remarks>
            /// List all aggregated projections
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sort'>
            /// Sort string. Any combination of the following fields: projectionId,
            /// createdAt, updatedAt. Add '+' and '-' prefixes to indicate
            /// ascending/descending sort order. Ascending order is default.
            /// </param>
            /// <param name='skip'>
            /// Number of entries to skip
            /// </param>
            /// <param name='limit'>
            /// Max number of entries to include in response. Default is 100.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projections> ListAggregatedProjectionsAsync(this ISerialized operations, string sort = default(string), int? skip = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAggregatedProjectionsWithHttpMessagesAsync(sort, skip, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get aggregated projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static Projection GetAggregatedProjection(this ISerialized operations, string projectionName)
            {
                return operations.GetAggregatedProjectionAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get aggregated projection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Projection> GetAggregatedProjectionAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregatedProjectionWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete/recreate aggregated projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            public static void RecreateAggregatedProjections(this ISerialized operations, string projectionName)
            {
                operations.RecreateAggregatedProjectionsAsync(projectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete/recreate aggregated projections
            /// </summary>
            /// <remarks>
            /// This call deletes all existing projections and starts a rebuild from the
            /// beginning of the event history. Keep in mind that this might take a while.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectionName'>
            /// The projection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecreateAggregatedProjectionsAsync(this ISerialized operations, string projectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RecreateAggregatedProjectionsWithHttpMessagesAsync(projectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List tenants
            /// </summary>
            /// <remarks>
            /// List tenants
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Tenants ListTenants(this ISerialized operations)
            {
                return operations.ListTenantsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List tenants
            /// </summary>
            /// <remarks>
            /// List tenants
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tenants> ListTenantsAsync(this ISerialized operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTenantsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add tenant
            /// </summary>
            /// <remarks>
            /// Add tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenant'>
            /// Tenant
            /// </param>
            public static void AddTenant(this ISerialized operations, Tenant tenant)
            {
                operations.AddTenantAsync(tenant).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add tenant
            /// </summary>
            /// <remarks>
            /// Add tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenant'>
            /// Tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddTenantAsync(this ISerialized operations, Tenant tenant, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddTenantWithHttpMessagesAsync(tenant, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete tenant
            /// </summary>
            /// <remarks>
            /// Delete tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            public static void DeleteTenant(this ISerialized operations, System.Guid tenantId)
            {
                operations.DeleteTenantAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete tenant
            /// </summary>
            /// <remarks>
            /// Delete tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTenantAsync(this ISerialized operations, System.Guid tenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTenantWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
